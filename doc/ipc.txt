
# *sensorsd* IPC protocol

The program *sensorsd* implements a socket IPC protocol around Android's
Sensors HAL API. This document describes the IPC protocol in detail.

Clients (i.e., external software) of sensors functionality establish a
connection with *sensorsd* and send **command messages.** For each command,
*sensorsd* replies with a **response message.** Examples of commands are
enabling and disabling individual sensors.

In addition to responses, *sensorsd* also sends **notification messages**
to inform its client about external events. An examples of notifications
are events from sensors.


## Connection establishment

Connections are **always** established by *sensorsd*. Supported sockets are
in the domain AF_UNIX with type SOCK_SEQPACKET. The client shall

  1. create a compatible listen socket,
  2. set an abstract socket name,
  3. start listening on the created socket, and
  4. start *sensorsd*.

The abstract socket name (excluding the trailing \0) is supplied to *sensorsd*
via the command-line option '-a'. *Sensorsd* will establish a connection to
the respective socket. If no socket name is given, the default is *sensorsd.*


## IPC protocol

The IPC protocol is PDU based. Each PDU contains exactly one message. There
are 3 types of messages:

  * commands,
  * resonses, and
  * notifications.

All PDUs have the same format (sizes in bit):

  +--------+--------+----------------+--- ... ---+
  | Service| Opcode | Payload length |  Payload  |
  +--------+--------+----------------+--- ... ---+
       8        8           16         <variable>

A **service** represents a group of messages, each **opcode** represents a
message of the service. Commands and their responses use the same opcode and
can be distinguished by the message's direction. Commands always flow from
client to daemon, responses always flow from daemon to client.

Notifications also always flow from daemon to client. They are distiguished
from responses by their opcode, which always has the MSB set to 1 for
notifications.

The format of the IPC protocol is intended to be compatible with the HAL
protocol for BlueZ [1].

### Registry service

The service ID is 0x00.

#### Commands / Responses

  * Opcode 0x00   Error response

      + Command:  - n/a
      + Response: - Error code (1 octet)

  * Opcode 0x01   Register service

      + Command:  - Service id (1 octet)
      + Response: - Protocol version (4 octets)

  * Opcode 0x02   Unregister service

      + Command:  - Service id (1 octet)
      + Response: <none>

### Poll service

The service ID is 0x01.

#### Commands / Responses

  * Opcode 0x00   Error response

      + Command:  - n/a
      + Response: - Error code (1 octet)

  * Opcode 0x01   Enable sensor

      + Command:  - Sensor id (4 octets)
      + Resonse:  <none>

  * Opcode 0x02   Disable sensor

      + Command:  - Sensor id (4 octets)
      + Resonse:  <none>

  * Opcode 0x03   Set sensor period

      + Command:  - Sensor id (4 octets)
                  - Period in ms (8 octets)
      + Resonse:  <none>

#### Notifications

  * Opcode 0x80   Error

      - Error code (1 octet)

  * Opcode 0x81   Sensor detected

      - Sensor id (4 octets)
      - Sensor type (4 octets)
      - Max range (4 octets)
      - Resolution (4 octets)
      - Power consumption in mA (4 octets)
      - Min delay (4 octets)
      - Max delay (4 octets)
      - Sensor trigger mode (1 octet)
      - Sensor delivery mode (1 octet)

  * Opcode 0x82   Sensor lost

      - Sensor id (4 octets)

  * Opcode 0x83   Sensor event detected

      - Sensor id (4 octets)
      - Sensor type (4 octets)
      - Timestamp in nanoseconds since system start (8 octets)
      - Sensor status (4 octets)
      - Event data (variable)
      - Sensor delivery mode (1 octet)

#### Enumerators

  * Sensor type

      - Synced with AOSP SENSOR_TYPE_ constants

  * Sensor mode

      - Synced with AOSP SENSOR_MODE_ constants

#### Structures

  * Event data

      - Variable number of data fields


## References

[1] [Android HAL protocol for Bluetooth](https://git.kernel.org/cgit/bluetooth/bluez.git/tree/android/hal-ipc-api.txt)
